{"version":3,"file":"static/js/728.99ef8c2e.chunk.js","mappings":"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","sources":["components/ListMovies/ListMovies.styled.jsx","components/ListItem/ListItem.js","components/ListMovies/ListMovies.js","services/movieApi.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  width: 100%;\n  gap: 20px;\n  flex-wrap: wrap;\n  justify-content: center;\n  list-style: none;\n`;\nexport const Item = styled.li`\n  /* width: 30%; */\n  /* max-width: 20%; */\n  max-width: 300px;\n  height: auto;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  box-sizing: border-box;\n`;\n","// import React from 'react';\n// import { Link } from 'react-router-dom';\n// import NoImage from '../../image/NoImage.svg.png';\n// import { Container, Rating } from '@mui/material';\n\n// function ListItem({ movie, location }) {\n//   const {\n//     title,\n//     name,\n//     id,\n//     poster_path,\n//     vote_average,\n//     release_date,\n//     first_air_date,\n//   } = movie;\n//   console.log(vote_average);\n//   return (\n//     <>\n//       <div>\n//         {poster_path ? (\n//           <img\n//             src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n//             width={`80`}\n//             alt=\"preview\"\n//           />\n//         ) : (\n//           <img src={NoImage} width={`50`} alt=\"preview\" />\n//         )}\n//       </div>\n//       <div>\n//         <Link to={`/movies/${id}`} state={{ from: location }}>\n//           {title || name}\n//         </Link>{' '}\n//         <p> {first_air_date || release_date}</p>\n//         <Rating\n//           name=\"size-small\"\n//           defaultValue={vote_average / 2}\n//           precision={0.5}\n//           readOnly\n//           size=\"small\"\n//         />\n//       </div>\n//     </>\n//   );\n// }\n\n// export default ListItem;\nimport * as React from 'react';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\nimport { CardActionArea, Rating } from '@mui/material';\nimport NoImage from '../../image/NoImage.svg.png';\nimport { Link } from 'react-router-dom';\n\nfunction ListMovie({ movie, location }) {\n  const {\n    title,\n    name,\n    id,\n    poster_path,\n    vote_average,\n    release_date,\n    first_air_date,\n  } = movie;\n\n  let shortTitle;\n\n  if (title) {\n    shortTitle = title.length <= 21 ? title : `${title.slice(0, 21)}...`;\n  }\n  let shortName;\n  if (name) {\n    shortName = name?.length <= 21 ? name : `${name.slice(0, 21)} ...`;\n  }\n  return (\n    <Link to={`/movies/${id}`} state={{ from: location }}>\n      <Card sx={{ maxWidth: 345 }}>\n        <CardActionArea>\n          {poster_path ? (\n            <CardMedia\n              component=\"img\"\n              height=\"auto\"\n              image={`https://image.tmdb.org/t/p/w300/${poster_path}`}\n              alt=\"green iguana\"\n            />\n          ) : (\n            <img src={NoImage} alt=\"preview\" />\n          )}\n\n          <CardContent sx={{ height: 80 }}>\n            <Typography gutterBottom variant=\"h5\">\n              {shortName || shortTitle}\n            </Typography>\n\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {first_air_date || release_date}\n            </Typography>\n            <Rating\n              name=\"size-small\"\n              defaultValue={vote_average / 2}\n              precision={0.5}\n              readOnly\n              size=\"small\"\n            />\n          </CardContent>\n        </CardActionArea>\n      </Card>\n    </Link>\n  );\n}\nexport default ListMovie;\n\n// console.log(vote_average);\n// return (\n//   <>\n//     <div>\n//       {poster_path ? (\n//         <img\n//           src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n//           width={`80`}\n//           alt=\"preview\"\n//         />\n//       ) : (\n//         <img src={NoImage} width={`50`} alt=\"preview\" />\n//       )}\n//     </div>\n//     <div>\n//       <Link to={`/movies/${id}`} state={{ from: location }}>\n//         {title || name}\n//       </Link>{' '}\n//       <p> {first_air_date || release_date}</p>\n//       <Rating\n//         name=\"size-small\"\n//         defaultValue={vote_average / 2}\n//         precision={0.5}\n//         readOnly\n//         size=\"small\"\n//       />\n//     </div>\n//   </>\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Item, List } from './ListMovies.styled';\nimport ListMovie from 'components/ListItem/ListItem';\n\nexport default function ListMovies({ movies }) {\n  const location = useLocation();\n  return (\n    <>\n      {Array.isArray(movies) ? (\n        <List>\n          {movies.map(movie => (\n            <Item key={movie.id}>\n              <ListMovie movie={movie} location={location} />\n            </Item>\n          ))}\n        </List>\n      ) : (\n        <p>Try again</p>\n      )}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'c5d5f3c7e995d560efb7f68509bca849',\n    language: 'en-US',\n    page: '1',\n  },\n});\n\nexport async function getTrendingMovies(page = 1) {\n  const query = 'trending/all/day';\n\n  try {\n    const { data } = await instance.get(`${query}`, {\n      params: { page: page },\n    });\n    console.log(data);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getMovieById(id) {\n  const query = `/movie/${id}`;\n  try {\n    const { data } = await instance.get(query);\n    console.log(data);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getMovieByName(queryString) {\n  const query = `/search/movie?query=${queryString}`;\n  try {\n    const { data } = await instance.get(query);\n    // console.log(data);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getMovieCredits(movie_id) {\n  const query = `/movie/${movie_id}/credits`;\n  // https://api.themoviedb.org/3/movie/movie_id/images\n\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getMovieReviews(movie_id) {\n  const query = `/movie/${movie_id}/reviews`;\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n"],"names":["List","styled","Item","shortTitle","shortName","movie","location","title","name","id","poster_path","vote_average","release_date","first_air_date","length","slice","to","state","from","Card","sx","maxWidth","CardActionArea","CardMedia","component","height","image","alt","src","NoImage","CardContent","Typography","gutterBottom","variant","color","Rating","defaultValue","precision","readOnly","size","ListMovies","movies","useLocation","Array","isArray","map","instance","axios","baseURL","params","api_key","language","page","getTrendingMovies","query","get","data","console","log","getMovieById","getMovieByName","queryString","getMovieCredits","movie_id","getMovieReviews"],"sourceRoot":""}